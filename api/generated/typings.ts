/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AcceptContactInvitationInput: { // input type
    contactInfoMessage: string; // String!
    serverSecret: string; // String!
    signature: string; // String!
    userId: string; // String!
    userSigningKey: string; // String!
  }
  AddCollaboratorToRepositoriesInput: { // input type
    contactId: string; // ID!
    repositoryGroupMessages?: NexusGenInputs['MultiRepositoryGroupMessagesInput'][] | null; // [MultiRepositoryGroupMessagesInput!]
  }
  AddDeviceInput: { // input type
    device: NexusGenInputs['DeviceInput']; // DeviceInput!
    serverSecret: string; // String!
    verificationMessage: string; // String!
  }
  AddUserToLicenseInput: { // input type
    licenseId: string; // ID!
    userId: string; // ID!
  }
  AuthenticateBillingAccountInput: { // input type
    emailToken: string; // String!
  }
  ClaimOneTimeKeysForMultipleDevicesInput: { // input type
    deviceIdKeys?: string[] | null; // [String!]
    requestId?: string | null; // String
  }
  CompleteContactInvitationInput: { // input type
    contactInvitationId: string; // String!
    signature: string; // String!
    userId: string; // String!
    userSigningKey: string; // String!
  }
  ConnectToLicenseInput: { // input type
    licenseToken: string; // ID!
  }
  ContentInput: { // input type
    encryptedContent: string; // String!
    groupSessionMessages?: Array<NexusGenInputs['GroupSessionMessageInput'] | null> | null; // [GroupSessionMessageInput]
    schemaVersion?: number | null; // Int
    schemaVersionSignature?: string | null; // String
  }
  CreateContactInvitationInput: { // input type
    serverSecret: string; // String!
  }
  CreateRepositoryInput: { // input type
    content: NexusGenInputs['ContentInput']; // ContentInput!
  }
  CreateUserInput: { // input type
    device: NexusGenInputs['DeviceInput']; // DeviceInput!
    signingKey: string; // String!
  }
  DeleteContactInput: { // input type
    contactId: string; // ID!
  }
  DeleteContactInvitationInput: { // input type
    contactInvitationId: string; // ID!
  }
  DeleteDeviceInput: { // input type
    deviceIdKey: string; // ID!
  }
  DeleteRepositoryInput: { // input type
    repositoryId: string; // ID!
  }
  DeleteUserInput: { // input type
    userId?: string | null; // ID
  }
  DeviceInput: { // input type
    fallbackKey: string; // String!
    fallbackKeySignature: string; // String!
    idKey: string; // String!
    oneTimeKeys?: NexusGenInputs['OneTimeKeyInput'][] | null; // [OneTimeKeyInput!]
    signature: string; // String!
    signingKey: string; // String!
  }
  DisconnectFromLicenseInput: { // input type
    licenseToken: string; // ID!
  }
  GroupSessionMessageInput: { // input type
    body: string; // String!
    targetDeviceIdKey: string; // String!
    type: number; // Int!
  }
  LastContentUpdateIntegrityIdByRepository: { // input type
    lastContentUpdateIntegrityId: string; // String!
    repositoryId: string; // ID!
  }
  MultiRepositoryGroupMessagesInput: { // input type
    groupSessionMessages?: Array<NexusGenInputs['GroupSessionMessageInput'] | null> | null; // [GroupSessionMessageInput]
    repositoryId: string; // ID!
  }
  OneTimeKeyInput: { // input type
    key: string; // String!
    signature: string; // String!
  }
  PrivateInfoGroupSessionMessageInput: { // input type
    body: string; // String!
    targetDeviceIdKey: string; // String!
    type: number; // Int!
  }
  RefreshLicenseTokenAndRemoveUserInput: { // input type
    licenseId: string; // ID!
  }
  RemoveCollaboratorFromRepositoryInput: { // input type
    collaboratorId: string; // ID!
    repositoryId: string; // ID!
  }
  RemoveOneTimeKeyInput: { // input type
    key: string; // String!
  }
  RepositoryGroupMessagesInput: { // input type
    groupSessionMessage: NexusGenInputs['GroupSessionMessageInput']; // GroupSessionMessageInput!
    repositoryId: string; // ID!
  }
  SendBillingAccountAuthEmailInput: { // input type
    email: string; // String!
  }
  SendOneTimeKeysInput: { // input type
    oneTimeKeys?: NexusGenInputs['OneTimeKeyInput'][] | null; // [OneTimeKeyInput!]
  }
  UpdatePrivateInfoInput: { // input type
    encryptedContent: string; // String!
    privateInfoGroupSessionMessages?: Array<NexusGenInputs['PrivateInfoGroupSessionMessageInput'] | null> | null; // [PrivateInfoGroupSessionMessageInput]
  }
  UpdateRepositoryContentAndGroupSessionInput: { // input type
    encryptedContent: string; // String!
    groupSessionMessages?: Array<NexusGenInputs['GroupSessionMessageInput'] | null> | null; // [GroupSessionMessageInput]
    repositoryId: string; // ID!
    schemaVersion?: number | null; // Int
    schemaVersionSignature?: string | null; // String
  }
  UpdateRepositoryContentInput: { // input type
    encryptedContent: string; // String!
    groupSessionMessageIds?: string[] | null; // [ID!]
    repositoryId: string; // ID!
    schemaVersion?: number | null; // Int
    schemaVersionSignature?: string | null; // String
  }
}

export interface NexusGenEnums {
  BillingAccountSuscriptionStatus: "ACTIVE" | "INACTIVE"
  SubscriptionPlan: "PERSONAL_PRO" | "TEAM"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AcceptContactInvitationResult: { // root type
    contactInvitation?: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  AddCollaboratorToRepositoriesResult: { // root type
    entries?: Array<NexusGenRootTypes['AddCollaboratorToRepositoriesResultEntry'] | null> | null; // [AddCollaboratorToRepositoriesResultEntry]
  }
  AddCollaboratorToRepositoriesResultEntry: { // root type
    groupSessionMessageIds?: Array<string | null> | null; // [ID]
    repositoryId?: string | null; // ID
  }
  AddDeviceResult: { // root type
    success?: boolean | null; // Boolean
  }
  AddDeviceVerification: { // root type
    verificationMessage?: string | null; // String
  }
  AddUserToLicenseResult: { // root type
    license?: NexusGenRootTypes['License'] | null; // License
  }
  AuthenticateBillingAccountResult: { // root type
    success?: boolean | null; // Boolean
  }
  BillingAccount: { // root type
    allLicenses?: Array<NexusGenRootTypes['License'] | null> | null; // [License]
    email?: string | null; // String
    id?: string | null; // ID
    paddleCancelUrl?: string | null; // String
    paddleUpdateUrl?: string | null; // String
  }
  ClaimOneTimeKeysForMultipleDevicesResult: { // root type
    oneTimeKeysWithDeviceIdKey?: Array<NexusGenRootTypes['OneTimeKeyWithDeviceIdKey'] | null> | null; // [OneTimeKeyWithDeviceIdKey]
  }
  CompleteContactInvitationResult: { // root type
    contactInvitation?: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  ConnectToLicenseResult: { // root type
    licenseToken?: string | null; // String
  }
  Contact: { // root type
    contactSigningKey?: string | null; // String
    contactUserId?: string | null; // ID
    id?: string | null; // ID
    signatures?: Array<string | null> | null; // [String]
    signingKey?: string | null; // String
  }
  ContactInvitation: { // root type
    acceptedByUserId?: string | null; // ID
    contactInfoMessage?: string | null; // String
    id?: string | null; // ID
    status?: string | null; // String
  }
  Content: { // root type
    authorDevice?: NexusGenRootTypes['Device'] | null; // Device
    authorUserId?: string | null; // ID
    encryptedContent?: string | null; // String
    groupSessionMessage?: NexusGenRootTypes['GroupSessionMessage'] | null; // GroupSessionMessage
    id?: string | null; // ID
    schemaVersion?: number | null; // Int
    schemaVersionSignature?: string | null; // String
  }
  CreateContactInvitationResult: { // root type
    contactInvitation?: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  CreateRepositoryResult: { // root type
    groupSessionMessageIds?: Array<string | null> | null; // [ID]
    repository?: NexusGenRootTypes['Repository'] | null; // Repository
  }
  CreateUserResult: { // root type
    user?: NexusGenRootTypes['User'] | null; // User
  }
  DeleteContactInvitationResult: { // root type
    success?: boolean | null; // Boolean
  }
  DeleteContactResult: { // root type
    success?: boolean | null; // Boolean
  }
  DeleteDeviceResult: { // root type
    success?: boolean | null; // Boolean
  }
  DeleteRepositoryResult: { // root type
    success?: boolean | null; // Boolean
  }
  DeleteUserResult: { // root type
    success?: boolean | null; // Boolean
  }
  Device: { // root type
    id?: string | null; // ID
    idKey?: string | null; // String
    signatures?: Array<string | null> | null; // [String]
    signingKey?: string | null; // String
    userId?: string | null; // String
  }
  DeviceTombstone: { // root type
    id?: string | null; // ID
    idKey?: string | null; // String
  }
  DisconnectFromLicenseResult: { // root type
    success?: boolean | null; // Boolean
  }
  GroupSessionMessage: { // root type
    body?: string | null; // String
    id?: string | null; // ID
    targetDeviceIdKey?: string | null; // String
    type?: number | null; // Int
  }
  License: { // root type
    id?: string | null; // ID
    token?: string | null; // String
    userId?: string | null; // String
  }
  LicenseToken: { // root type
    isActive?: boolean | null; // Boolean
    subscriptionPlan?: NexusGenEnums['SubscriptionPlan'] | null; // SubscriptionPlan
    token?: string | null; // String
  }
  LogoutBillingAccountResult: { // root type
    success?: boolean | null; // Boolean
  }
  Mutation: {};
  OneTimeKey: { // root type
    key?: string | null; // String
    signature?: string | null; // String
  }
  OneTimeKeyWithDeviceIdKey: { // root type
    deviceIdKey?: string | null; // String
    oneTimeKey?: NexusGenRootTypes['OneTimeKey'] | null; // OneTimeKey
  }
  PrivateInfo: { // root type
    privateInfoContent?: Array<NexusGenRootTypes['PrivateInfoContent'] | null> | null; // [PrivateInfoContent]
  }
  PrivateInfoContent: { // root type
    authorDevice?: NexusGenRootTypes['Device'] | null; // Device
    encryptedContent?: string | null; // String
    privateInfoGroupSessionMessage?: NexusGenRootTypes['PrivateInfoGroupSessionMessage'] | null; // PrivateInfoGroupSessionMessage
  }
  PrivateInfoGroupSessionMessage: { // root type
    body?: string | null; // String
    id?: string | null; // ID
    targetDeviceIdKey?: string | null; // String
    type?: number | null; // Int
  }
  Query: {};
  RefreshLicenseTokenAndRemoveUserResult: { // root type
    license?: NexusGenRootTypes['License'] | null; // License
  }
  RemoveCollaboratorFromRepositoryResult: { // root type
    repository?: NexusGenRootTypes['Repository'] | null; // Repository
  }
  RemoveOneTimeKeyResult: { // root type
    success?: boolean | null; // Boolean
  }
  Repository: { // root type
    collaborators?: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    content?: Array<NexusGenRootTypes['Content'] | null> | null; // [Content]
    id?: string | null; // ID
    lastContentUpdateIntegrityId?: string | null; // String
  }
  RepositoryDevicesResult: { // root type
    devices?: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    groupSessionMessageIdsMatchTargetDevices?: boolean | null; // Boolean
  }
  RepositoryTombstone: { // root type
    id?: string | null; // ID
  }
  SendBillingAccountAuthEmailResult: { // root type
    success?: boolean | null; // Boolean
  }
  SendOneTimeKeysResult: { // root type
    device?: NexusGenRootTypes['Device'] | null; // Device
  }
  UpdatePrivateInfoResult: { // root type
    privateInfoContent?: NexusGenRootTypes['PrivateInfoContent'] | null; // PrivateInfoContent
  }
  UpdateRepositoryContentAndGroupSessionResult: { // root type
    content?: NexusGenRootTypes['Content'] | null; // Content
    groupSessionMessageIds?: Array<string | null> | null; // [ID]
  }
  UpdateRepositoryContentResult: { // root type
    content?: NexusGenRootTypes['Content'] | null; // Content
  }
  User: { // root type
    id?: string | null; // ID
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
  RepositoryResult: NexusGenRootTypes['Repository'] | NexusGenRootTypes['RepositoryTombstone'];
}

export type NexusGenRootTypes = NexusGenObjects & NexusGenUnions

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  AcceptContactInvitationResult: { // field return type
    contactInvitation: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  AddCollaboratorToRepositoriesResult: { // field return type
    entries: Array<NexusGenRootTypes['AddCollaboratorToRepositoriesResultEntry'] | null> | null; // [AddCollaboratorToRepositoriesResultEntry]
  }
  AddCollaboratorToRepositoriesResultEntry: { // field return type
    groupSessionMessageIds: Array<string | null> | null; // [ID]
    repositoryId: string | null; // ID
  }
  AddDeviceResult: { // field return type
    success: boolean | null; // Boolean
  }
  AddDeviceVerification: { // field return type
    verificationMessage: string | null; // String
  }
  AddUserToLicenseResult: { // field return type
    license: NexusGenRootTypes['License'] | null; // License
  }
  AuthenticateBillingAccountResult: { // field return type
    success: boolean | null; // Boolean
  }
  BillingAccount: { // field return type
    allLicenses: Array<NexusGenRootTypes['License'] | null> | null; // [License]
    email: string | null; // String
    id: string | null; // ID
    paddleCancelUrl: string | null; // String
    paddleUpdateUrl: string | null; // String
  }
  ClaimOneTimeKeysForMultipleDevicesResult: { // field return type
    oneTimeKeysWithDeviceIdKey: Array<NexusGenRootTypes['OneTimeKeyWithDeviceIdKey'] | null> | null; // [OneTimeKeyWithDeviceIdKey]
  }
  CompleteContactInvitationResult: { // field return type
    contactInvitation: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  ConnectToLicenseResult: { // field return type
    licenseToken: string | null; // String
  }
  Contact: { // field return type
    contactSigningKey: string | null; // String
    contactUserId: string | null; // ID
    id: string | null; // ID
    signatures: Array<string | null> | null; // [String]
    signingKey: string | null; // String
  }
  ContactInvitation: { // field return type
    acceptedByUserId: string | null; // ID
    contactInfoMessage: string | null; // String
    id: string | null; // ID
    status: string | null; // String
  }
  Content: { // field return type
    authorDevice: NexusGenRootTypes['Device'] | null; // Device
    authorUserId: string | null; // ID
    createdAt: string | null; // String
    encryptedContent: string | null; // String
    groupSessionMessage: NexusGenRootTypes['GroupSessionMessage'] | null; // GroupSessionMessage
    id: string | null; // ID
    schemaVersion: number | null; // Int
    schemaVersionSignature: string | null; // String
  }
  CreateContactInvitationResult: { // field return type
    contactInvitation: NexusGenRootTypes['ContactInvitation'] | null; // ContactInvitation
  }
  CreateRepositoryResult: { // field return type
    groupSessionMessageIds: Array<string | null> | null; // [ID]
    repository: NexusGenRootTypes['Repository'] | null; // Repository
  }
  CreateUserResult: { // field return type
    user: NexusGenRootTypes['User'] | null; // User
  }
  DeleteContactInvitationResult: { // field return type
    success: boolean | null; // Boolean
  }
  DeleteContactResult: { // field return type
    success: boolean | null; // Boolean
  }
  DeleteDeviceResult: { // field return type
    success: boolean | null; // Boolean
  }
  DeleteRepositoryResult: { // field return type
    success: boolean | null; // Boolean
  }
  DeleteUserResult: { // field return type
    success: boolean | null; // Boolean
  }
  Device: { // field return type
    id: string | null; // ID
    idKey: string | null; // String
    oneTimeKeys: Array<NexusGenRootTypes['OneTimeKey'] | null> | null; // [OneTimeKey]
    signatures: Array<string | null> | null; // [String]
    signingKey: string | null; // String
    userId: string | null; // String
  }
  DeviceTombstone: { // field return type
    id: string | null; // ID
    idKey: string | null; // String
  }
  DisconnectFromLicenseResult: { // field return type
    success: boolean | null; // Boolean
  }
  GroupSessionMessage: { // field return type
    body: string | null; // String
    id: string | null; // ID
    targetDeviceIdKey: string | null; // String
    type: number | null; // Int
  }
  License: { // field return type
    createdAt: string | null; // String
    id: string | null; // ID
    token: string | null; // String
    userId: string | null; // String
  }
  LicenseToken: { // field return type
    isActive: boolean | null; // Boolean
    subscriptionPlan: NexusGenEnums['SubscriptionPlan'] | null; // SubscriptionPlan
    token: string | null; // String
  }
  LogoutBillingAccountResult: { // field return type
    success: boolean | null; // Boolean
  }
  Mutation: { // field return type
    acceptContactInvitation: NexusGenRootTypes['AcceptContactInvitationResult'] | null; // AcceptContactInvitationResult
    addCollaboratorToRepositories: NexusGenRootTypes['AddCollaboratorToRepositoriesResult'] | null; // AddCollaboratorToRepositoriesResult
    addDevice: NexusGenRootTypes['AddDeviceResult'] | null; // AddDeviceResult
    addUserToLicense: NexusGenRootTypes['AddUserToLicenseResult'] | null; // AddUserToLicenseResult
    authenticateBillingAccount: NexusGenRootTypes['AuthenticateBillingAccountResult'] | null; // AuthenticateBillingAccountResult
    claimOneTimeKeysForMultipleDevices: NexusGenRootTypes['ClaimOneTimeKeysForMultipleDevicesResult'] | null; // ClaimOneTimeKeysForMultipleDevicesResult
    completeContactInvitation: NexusGenRootTypes['CompleteContactInvitationResult'] | null; // CompleteContactInvitationResult
    connectToLicense: NexusGenRootTypes['ConnectToLicenseResult'] | null; // ConnectToLicenseResult
    createContactInvitation: NexusGenRootTypes['CreateContactInvitationResult'] | null; // CreateContactInvitationResult
    createRepository: NexusGenRootTypes['CreateRepositoryResult'] | null; // CreateRepositoryResult
    createUser: NexusGenRootTypes['CreateUserResult'] | null; // CreateUserResult
    deleteContact: NexusGenRootTypes['DeleteContactResult'] | null; // DeleteContactResult
    deleteContactInvitation: NexusGenRootTypes['DeleteContactInvitationResult'] | null; // DeleteContactInvitationResult
    deleteDevice: NexusGenRootTypes['DeleteDeviceResult'] | null; // DeleteDeviceResult
    deleteRepository: NexusGenRootTypes['DeleteRepositoryResult'] | null; // DeleteRepositoryResult
    deleteUser: NexusGenRootTypes['DeleteUserResult'] | null; // DeleteUserResult
    disconnectFromLicense: NexusGenRootTypes['DisconnectFromLicenseResult'] | null; // DisconnectFromLicenseResult
    logoutBillingAccount: NexusGenRootTypes['LogoutBillingAccountResult'] | null; // LogoutBillingAccountResult
    refreshLicenseTokenAndRemoveUser: NexusGenRootTypes['RefreshLicenseTokenAndRemoveUserResult'] | null; // RefreshLicenseTokenAndRemoveUserResult
    removeCollaboratorFromRepository: NexusGenRootTypes['RemoveCollaboratorFromRepositoryResult'] | null; // RemoveCollaboratorFromRepositoryResult
    removeOneTimeKey: NexusGenRootTypes['RemoveOneTimeKeyResult'] | null; // RemoveOneTimeKeyResult
    sendBillingAccountAuthEmail: NexusGenRootTypes['SendBillingAccountAuthEmailResult'] | null; // SendBillingAccountAuthEmailResult
    sendOneTimeKeys: NexusGenRootTypes['SendOneTimeKeysResult'] | null; // SendOneTimeKeysResult
    updatePrivateInfo: NexusGenRootTypes['UpdatePrivateInfoResult'] | null; // UpdatePrivateInfoResult
    updateRepositoryContent: NexusGenRootTypes['UpdateRepositoryContentResult'] | null; // UpdateRepositoryContentResult
    updateRepositoryContentAndGroupSession: NexusGenRootTypes['UpdateRepositoryContentAndGroupSessionResult'] | null; // UpdateRepositoryContentAndGroupSessionResult
  }
  OneTimeKey: { // field return type
    key: string | null; // String
    signature: string | null; // String
  }
  OneTimeKeyWithDeviceIdKey: { // field return type
    deviceIdKey: string | null; // String
    oneTimeKey: NexusGenRootTypes['OneTimeKey'] | null; // OneTimeKey
  }
  PrivateInfo: { // field return type
    privateInfoContent: Array<NexusGenRootTypes['PrivateInfoContent'] | null> | null; // [PrivateInfoContent]
  }
  PrivateInfoContent: { // field return type
    authorDevice: NexusGenRootTypes['Device'] | null; // Device
    encryptedContent: string | null; // String
    privateInfoGroupSessionMessage: NexusGenRootTypes['PrivateInfoGroupSessionMessage'] | null; // PrivateInfoGroupSessionMessage
  }
  PrivateInfoGroupSessionMessage: { // field return type
    body: string | null; // String
    id: string | null; // ID
    targetDeviceIdKey: string | null; // String
    type: number | null; // Int
  }
  Query: { // field return type
    allDeviceTombstones: Array<NexusGenRootTypes['DeviceTombstone'] | null> | null; // [DeviceTombstone]
    allLicenseTokens: Array<NexusGenRootTypes['LicenseToken'] | null> | null; // [LicenseToken]
    allRepositories: Array<NexusGenRootTypes['RepositoryResult'] | null> | null; // [RepositoryResult]
    billingAccount: NexusGenRootTypes['BillingAccount'] | null; // BillingAccount
    contactInvitations: Array<NexusGenRootTypes['ContactInvitation'] | null> | null; // [ContactInvitation]
    contacts: Array<NexusGenRootTypes['Contact'] | null> | null; // [Contact]
    devices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    devicesForContact: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    devicesForContactInvitation: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    fetchAddDeviceVerification: NexusGenRootTypes['AddDeviceVerification'] | null; // AddDeviceVerification
    privateInfo: NexusGenRootTypes['PrivateInfo'] | null; // PrivateInfo
    repository: NexusGenRootTypes['RepositoryResult'] | null; // RepositoryResult
    repositoryDevices: NexusGenRootTypes['RepositoryDevicesResult'] | null; // RepositoryDevicesResult
    unclaimedOneTimeKeysCount: number | null; // Int
  }
  RefreshLicenseTokenAndRemoveUserResult: { // field return type
    license: NexusGenRootTypes['License'] | null; // License
  }
  RemoveCollaboratorFromRepositoryResult: { // field return type
    repository: NexusGenRootTypes['Repository'] | null; // Repository
  }
  RemoveOneTimeKeyResult: { // field return type
    success: boolean | null; // Boolean
  }
  Repository: { // field return type
    collaborators: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    content: Array<NexusGenRootTypes['Content'] | null> | null; // [Content]
    id: string | null; // ID
    isCreator: boolean | null; // Boolean
    lastContentUpdateIntegrityId: string | null; // String
  }
  RepositoryDevicesResult: { // field return type
    devices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    groupSessionMessageIdsMatchTargetDevices: boolean | null; // Boolean
  }
  RepositoryTombstone: { // field return type
    id: string | null; // ID
  }
  SendBillingAccountAuthEmailResult: { // field return type
    success: boolean | null; // Boolean
  }
  SendOneTimeKeysResult: { // field return type
    device: NexusGenRootTypes['Device'] | null; // Device
  }
  UpdatePrivateInfoResult: { // field return type
    privateInfoContent: NexusGenRootTypes['PrivateInfoContent'] | null; // PrivateInfoContent
  }
  UpdateRepositoryContentAndGroupSessionResult: { // field return type
    content: NexusGenRootTypes['Content'] | null; // Content
    groupSessionMessageIds: Array<string | null> | null; // [ID]
  }
  UpdateRepositoryContentResult: { // field return type
    content: NexusGenRootTypes['Content'] | null; // Content
  }
  User: { // field return type
    devices: Array<NexusGenRootTypes['Device'] | null> | null; // [Device]
    id: string | null; // ID
  }
}

export interface NexusGenFieldTypeNames {
  AcceptContactInvitationResult: { // field return type name
    contactInvitation: 'ContactInvitation'
  }
  AddCollaboratorToRepositoriesResult: { // field return type name
    entries: 'AddCollaboratorToRepositoriesResultEntry'
  }
  AddCollaboratorToRepositoriesResultEntry: { // field return type name
    groupSessionMessageIds: 'ID'
    repositoryId: 'ID'
  }
  AddDeviceResult: { // field return type name
    success: 'Boolean'
  }
  AddDeviceVerification: { // field return type name
    verificationMessage: 'String'
  }
  AddUserToLicenseResult: { // field return type name
    license: 'License'
  }
  AuthenticateBillingAccountResult: { // field return type name
    success: 'Boolean'
  }
  BillingAccount: { // field return type name
    allLicenses: 'License'
    email: 'String'
    id: 'ID'
    paddleCancelUrl: 'String'
    paddleUpdateUrl: 'String'
  }
  ClaimOneTimeKeysForMultipleDevicesResult: { // field return type name
    oneTimeKeysWithDeviceIdKey: 'OneTimeKeyWithDeviceIdKey'
  }
  CompleteContactInvitationResult: { // field return type name
    contactInvitation: 'ContactInvitation'
  }
  ConnectToLicenseResult: { // field return type name
    licenseToken: 'String'
  }
  Contact: { // field return type name
    contactSigningKey: 'String'
    contactUserId: 'ID'
    id: 'ID'
    signatures: 'String'
    signingKey: 'String'
  }
  ContactInvitation: { // field return type name
    acceptedByUserId: 'ID'
    contactInfoMessage: 'String'
    id: 'ID'
    status: 'String'
  }
  Content: { // field return type name
    authorDevice: 'Device'
    authorUserId: 'ID'
    createdAt: 'String'
    encryptedContent: 'String'
    groupSessionMessage: 'GroupSessionMessage'
    id: 'ID'
    schemaVersion: 'Int'
    schemaVersionSignature: 'String'
  }
  CreateContactInvitationResult: { // field return type name
    contactInvitation: 'ContactInvitation'
  }
  CreateRepositoryResult: { // field return type name
    groupSessionMessageIds: 'ID'
    repository: 'Repository'
  }
  CreateUserResult: { // field return type name
    user: 'User'
  }
  DeleteContactInvitationResult: { // field return type name
    success: 'Boolean'
  }
  DeleteContactResult: { // field return type name
    success: 'Boolean'
  }
  DeleteDeviceResult: { // field return type name
    success: 'Boolean'
  }
  DeleteRepositoryResult: { // field return type name
    success: 'Boolean'
  }
  DeleteUserResult: { // field return type name
    success: 'Boolean'
  }
  Device: { // field return type name
    id: 'ID'
    idKey: 'String'
    oneTimeKeys: 'OneTimeKey'
    signatures: 'String'
    signingKey: 'String'
    userId: 'String'
  }
  DeviceTombstone: { // field return type name
    id: 'ID'
    idKey: 'String'
  }
  DisconnectFromLicenseResult: { // field return type name
    success: 'Boolean'
  }
  GroupSessionMessage: { // field return type name
    body: 'String'
    id: 'ID'
    targetDeviceIdKey: 'String'
    type: 'Int'
  }
  License: { // field return type name
    createdAt: 'String'
    id: 'ID'
    token: 'String'
    userId: 'String'
  }
  LicenseToken: { // field return type name
    isActive: 'Boolean'
    subscriptionPlan: 'SubscriptionPlan'
    token: 'String'
  }
  LogoutBillingAccountResult: { // field return type name
    success: 'Boolean'
  }
  Mutation: { // field return type name
    acceptContactInvitation: 'AcceptContactInvitationResult'
    addCollaboratorToRepositories: 'AddCollaboratorToRepositoriesResult'
    addDevice: 'AddDeviceResult'
    addUserToLicense: 'AddUserToLicenseResult'
    authenticateBillingAccount: 'AuthenticateBillingAccountResult'
    claimOneTimeKeysForMultipleDevices: 'ClaimOneTimeKeysForMultipleDevicesResult'
    completeContactInvitation: 'CompleteContactInvitationResult'
    connectToLicense: 'ConnectToLicenseResult'
    createContactInvitation: 'CreateContactInvitationResult'
    createRepository: 'CreateRepositoryResult'
    createUser: 'CreateUserResult'
    deleteContact: 'DeleteContactResult'
    deleteContactInvitation: 'DeleteContactInvitationResult'
    deleteDevice: 'DeleteDeviceResult'
    deleteRepository: 'DeleteRepositoryResult'
    deleteUser: 'DeleteUserResult'
    disconnectFromLicense: 'DisconnectFromLicenseResult'
    logoutBillingAccount: 'LogoutBillingAccountResult'
    refreshLicenseTokenAndRemoveUser: 'RefreshLicenseTokenAndRemoveUserResult'
    removeCollaboratorFromRepository: 'RemoveCollaboratorFromRepositoryResult'
    removeOneTimeKey: 'RemoveOneTimeKeyResult'
    sendBillingAccountAuthEmail: 'SendBillingAccountAuthEmailResult'
    sendOneTimeKeys: 'SendOneTimeKeysResult'
    updatePrivateInfo: 'UpdatePrivateInfoResult'
    updateRepositoryContent: 'UpdateRepositoryContentResult'
    updateRepositoryContentAndGroupSession: 'UpdateRepositoryContentAndGroupSessionResult'
  }
  OneTimeKey: { // field return type name
    key: 'String'
    signature: 'String'
  }
  OneTimeKeyWithDeviceIdKey: { // field return type name
    deviceIdKey: 'String'
    oneTimeKey: 'OneTimeKey'
  }
  PrivateInfo: { // field return type name
    privateInfoContent: 'PrivateInfoContent'
  }
  PrivateInfoContent: { // field return type name
    authorDevice: 'Device'
    encryptedContent: 'String'
    privateInfoGroupSessionMessage: 'PrivateInfoGroupSessionMessage'
  }
  PrivateInfoGroupSessionMessage: { // field return type name
    body: 'String'
    id: 'ID'
    targetDeviceIdKey: 'String'
    type: 'Int'
  }
  Query: { // field return type name
    allDeviceTombstones: 'DeviceTombstone'
    allLicenseTokens: 'LicenseToken'
    allRepositories: 'RepositoryResult'
    billingAccount: 'BillingAccount'
    contactInvitations: 'ContactInvitation'
    contacts: 'Contact'
    devices: 'Device'
    devicesForContact: 'Device'
    devicesForContactInvitation: 'Device'
    fetchAddDeviceVerification: 'AddDeviceVerification'
    privateInfo: 'PrivateInfo'
    repository: 'RepositoryResult'
    repositoryDevices: 'RepositoryDevicesResult'
    unclaimedOneTimeKeysCount: 'Int'
  }
  RefreshLicenseTokenAndRemoveUserResult: { // field return type name
    license: 'License'
  }
  RemoveCollaboratorFromRepositoryResult: { // field return type name
    repository: 'Repository'
  }
  RemoveOneTimeKeyResult: { // field return type name
    success: 'Boolean'
  }
  Repository: { // field return type name
    collaborators: 'User'
    content: 'Content'
    id: 'ID'
    isCreator: 'Boolean'
    lastContentUpdateIntegrityId: 'String'
  }
  RepositoryDevicesResult: { // field return type name
    devices: 'Device'
    groupSessionMessageIdsMatchTargetDevices: 'Boolean'
  }
  RepositoryTombstone: { // field return type name
    id: 'ID'
  }
  SendBillingAccountAuthEmailResult: { // field return type name
    success: 'Boolean'
  }
  SendOneTimeKeysResult: { // field return type name
    device: 'Device'
  }
  UpdatePrivateInfoResult: { // field return type name
    privateInfoContent: 'PrivateInfoContent'
  }
  UpdateRepositoryContentAndGroupSessionResult: { // field return type name
    content: 'Content'
    groupSessionMessageIds: 'ID'
  }
  UpdateRepositoryContentResult: { // field return type name
    content: 'Content'
  }
  User: { // field return type name
    devices: 'Device'
    id: 'ID'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    acceptContactInvitation: { // args
      input: NexusGenInputs['AcceptContactInvitationInput']; // AcceptContactInvitationInput!
    }
    addCollaboratorToRepositories: { // args
      input: NexusGenInputs['AddCollaboratorToRepositoriesInput']; // AddCollaboratorToRepositoriesInput!
    }
    addDevice: { // args
      input: NexusGenInputs['AddDeviceInput']; // AddDeviceInput!
    }
    addUserToLicense: { // args
      input: NexusGenInputs['AddUserToLicenseInput']; // AddUserToLicenseInput!
    }
    authenticateBillingAccount: { // args
      input: NexusGenInputs['AuthenticateBillingAccountInput']; // AuthenticateBillingAccountInput!
    }
    claimOneTimeKeysForMultipleDevices: { // args
      input: NexusGenInputs['ClaimOneTimeKeysForMultipleDevicesInput']; // ClaimOneTimeKeysForMultipleDevicesInput!
    }
    completeContactInvitation: { // args
      input: NexusGenInputs['CompleteContactInvitationInput']; // CompleteContactInvitationInput!
    }
    connectToLicense: { // args
      input: NexusGenInputs['ConnectToLicenseInput']; // ConnectToLicenseInput!
    }
    createContactInvitation: { // args
      input: NexusGenInputs['CreateContactInvitationInput']; // CreateContactInvitationInput!
    }
    createRepository: { // args
      input: NexusGenInputs['CreateRepositoryInput']; // CreateRepositoryInput!
    }
    createUser: { // args
      input: NexusGenInputs['CreateUserInput']; // CreateUserInput!
    }
    deleteContact: { // args
      input: NexusGenInputs['DeleteContactInput']; // DeleteContactInput!
    }
    deleteContactInvitation: { // args
      input: NexusGenInputs['DeleteContactInvitationInput']; // DeleteContactInvitationInput!
    }
    deleteDevice: { // args
      input: NexusGenInputs['DeleteDeviceInput']; // DeleteDeviceInput!
    }
    deleteRepository: { // args
      input: NexusGenInputs['DeleteRepositoryInput']; // DeleteRepositoryInput!
    }
    deleteUser: { // args
      input: NexusGenInputs['DeleteUserInput']; // DeleteUserInput!
    }
    disconnectFromLicense: { // args
      input: NexusGenInputs['DisconnectFromLicenseInput']; // DisconnectFromLicenseInput!
    }
    refreshLicenseTokenAndRemoveUser: { // args
      input: NexusGenInputs['RefreshLicenseTokenAndRemoveUserInput']; // RefreshLicenseTokenAndRemoveUserInput!
    }
    removeCollaboratorFromRepository: { // args
      input: NexusGenInputs['RemoveCollaboratorFromRepositoryInput']; // RemoveCollaboratorFromRepositoryInput!
    }
    removeOneTimeKey: { // args
      input: NexusGenInputs['RemoveOneTimeKeyInput']; // RemoveOneTimeKeyInput!
    }
    sendBillingAccountAuthEmail: { // args
      input: NexusGenInputs['SendBillingAccountAuthEmailInput']; // SendBillingAccountAuthEmailInput!
    }
    sendOneTimeKeys: { // args
      input: NexusGenInputs['SendOneTimeKeysInput']; // SendOneTimeKeysInput!
    }
    updatePrivateInfo: { // args
      input: NexusGenInputs['UpdatePrivateInfoInput']; // UpdatePrivateInfoInput!
    }
    updateRepositoryContent: { // args
      input: NexusGenInputs['UpdateRepositoryContentInput']; // UpdateRepositoryContentInput!
    }
    updateRepositoryContentAndGroupSession: { // args
      input: NexusGenInputs['UpdateRepositoryContentAndGroupSessionInput']; // UpdateRepositoryContentAndGroupSessionInput!
    }
  }
  Query: {
    allRepositories: { // args
      lastContentUpdateIntegrityIdsByRepository?: Array<NexusGenInputs['LastContentUpdateIntegrityIdByRepository'] | null> | null; // [LastContentUpdateIntegrityIdByRepository]
    }
    devicesForContact: { // args
      contactId: string; // ID!
    }
    devicesForContactInvitation: { // args
      serverSecret: string; // String!
      userId: string; // ID!
      userSigningKey: string; // String!
    }
    fetchAddDeviceVerification: { // args
      deviceIdKey: string; // String!
      serverSecret: string; // String!
    }
    repository: { // args
      id: string; // ID!
    }
    repositoryDevices: { // args
      groupSessionMessageIds: string[]; // [ID!]!
      repositoryId: string; // ID!
    }
    unclaimedOneTimeKeysCount: { // args
      deviceIdKey?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  RepositoryResult: "Repository" | "RepositoryTombstone"
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = keyof NexusGenUnions;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = "RepositoryResult";

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}